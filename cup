import java.awt.*;
import java.awt.image.BufferedImage;
import javax.swing.*;

import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Random;

public class gameStart extends JFrame {
    int secondsRemaining;
    Timer timer;
    JLabel timerLabel;

    JButton hintbt = new JButton();
    BufferedImage img = null;

    public gameStart() {
        gameStartFrame();
        cursor();
        cup(); // cup 생성
        randomStringPanel(); // RandomStringPanel 생성
    }

	public void cursor() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Image cursorimage = tk.getImage("images/cursor.png");
        Point point = new Point(10, 10);
        Cursor cursor = tk.createCustomCursor(cursorimage, point, "");

        this.setCursor(cursor);
    }

	// 팝업창
	public void popup() {
		try {
			// 이미지 파일 불러오기
			BufferedImage image = ImageIO.read(new File("images/recipe.png")); // 팝업 배경 이미지

			// 이미지를 화면에 표시
			JFrame hintFrame = new JFrame();

			JButton quitbt = new JButton(new ImageIcon("images/quit.png"));
			quitbt.setBounds(435, 15, 55, 55); // 버튼 위치와 크기 설정
			quitbt.setBorder(null);

			quitbt.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					hintFrame.setVisible(false);
				}
			});

            hintFrame.add(quitbt);

            hintFrame.setSize(505, 635);
            hintFrame.setResizable(false);
            hintFrame.setLocationRelativeTo(null);
            hintFrame.getContentPane().add(new JLabel(new ImageIcon(image)));
			
            setDefaultCloseOperation(EXIT_ON_CLOSE); // 창을 닫으면 프로그램을 종료
            
            addWindowListener(new WindowAdapter() { 
                @Override
                public void windowClosing(WindowEvent e) { 
                    System.exit(0); 
                }
            });
            
	        setVisible(true); 

         } catch (Exception e) {
             e.printStackTrace();
         }
     }

     public void gameStartFrame() {
         setTitle("Be My Cafe"); 
         setSize(922, 519); 
        
         setResizable(false); 
         
         setLocationRelativeTo(null);

	     setDefaultCloseOperation(EXIT_ON_CLOSE);

	     setVisible(true);
     }

    public void randomStringPanel() {
        String[] strings = {"String1", "String2", "String3"};
        RandomStringPanel panel = new RandomStringPanel(strings);
        this.add(panel.createRandomStringPanel());
    }

	class cup extends JFrame implements ActionListener {
	    ImageIcon before = new ImageIcon("images/mug.png");
	    ImageIcon after = new ImageIcon("images/cup.png");
	    JButton b1 = new JButton(before);
	    JButton b2 = new JButton(after);;
	    
	    JPanel panel;

	    public cup() {
	        setSize(500, 500);
	        setVisible(true);
	        
	        init();
	        
	        this.add(panel);
	     }
	    
	     void init() {
	         b1.setIconTextGap(1);
	         b2.setIconTextGap(1);

	         panel = new JPanel();
	         panel.add(b1, BorderLayout.CENTER); 
	         
	         b1.addActionListener(this);
	         b2.addActionListener(this);   
	     }
	     
	     public void actionPerformed(ActionEvent e) {
	         if((e.getSource()).equals(b1)) {
	             panel.removeAll();
	             panel.add(b2);
	             panel.revalidate(); 
	             panel.repaint();  
	          } else {
	             panel.removeAll();
	             panel.add(b1);
	             panel.revalidate();  
	             panel.repaint();  
	          }
	      }
	}

	class RandomStringPanel{
		private String[] strings;
		private JLabel outputLabel;

		public RandomStringPanel(String[] strings) {
			this.strings = strings;
			outputLabel = new JLabel("Random String: ");
		}

		public JPanel createRandomStringPanel() {
			JPanel panel = new JPanel();
			JButton submitButton = new JButton("Submit");

			submitButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					Random random = new Random();
					int randomIndex = random.nextInt(strings.length);
					String randomString = strings[randomIndex];
					outputLabel.setText(randomString);
				}
			});

			submitButton.setBounds(10, 10, 80, 30);
			outputLabel.setBounds(100, 10, 200, 30);

			panel.setLayout(null); 
			panel.add(submitButton);
           	panel.add(outputLabel);

            return panel;
	   }
    }

    public static void main(String[] args) {

    	SwingUtilities.invokeLater(() ->{
          	new gameStart().setVisible(true);;
       });

    }
}
